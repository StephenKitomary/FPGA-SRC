$date
	Tue Nov  5 07:47:46 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FullAdder_tb $end
$var wire 1 ! sum $end
$var wire 2 " out_cmp [1:0] $end
$var wire 1 # carry $end
$var reg 1 $ a $end
$var reg 1 % b $end
$var reg 1 & c $end
$var reg 1 ' fail $end
$scope module FULLADDER $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 & c $end
$var wire 1 ! sum $end
$var wire 1 ( s1 $end
$var wire 1 # carry $end
$var wire 1 ) c2 $end
$var wire 1 * c1 $end
$scope module add0 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 ( sum $end
$var wire 1 * carry $end
$scope module and0 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 + w1 $end
$var wire 1 * out $end
$scope module nand0 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 + out $end
$upscope $end
$scope module not0 $end
$var wire 1 + in $end
$var wire 1 * out $end
$upscope $end
$upscope $end
$scope module xor0 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 ( out $end
$var wire 1 , notB $end
$var wire 1 - notAandB $end
$var wire 1 . notA $end
$var wire 1 / aAndNotB $end
$scope module and0 $end
$var wire 1 $ a $end
$var wire 1 0 w1 $end
$var wire 1 / out $end
$var wire 1 , b $end
$scope module nand0 $end
$var wire 1 $ a $end
$var wire 1 0 out $end
$var wire 1 , b $end
$upscope $end
$scope module not0 $end
$var wire 1 0 in $end
$var wire 1 / out $end
$upscope $end
$upscope $end
$scope module and1 $end
$var wire 1 % b $end
$var wire 1 1 w1 $end
$var wire 1 - out $end
$var wire 1 . a $end
$scope module nand0 $end
$var wire 1 % b $end
$var wire 1 1 out $end
$var wire 1 . a $end
$upscope $end
$scope module not0 $end
$var wire 1 1 in $end
$var wire 1 - out $end
$upscope $end
$upscope $end
$scope module not0 $end
$var wire 1 $ in $end
$var wire 1 . out $end
$upscope $end
$scope module not1 $end
$var wire 1 % in $end
$var wire 1 , out $end
$upscope $end
$scope module or0 $end
$var wire 1 / a $end
$var wire 1 - b $end
$var wire 1 2 w2 $end
$var wire 1 3 w1 $end
$var wire 1 ( out $end
$scope module nand0 $end
$var wire 1 / a $end
$var wire 1 / b $end
$var wire 1 3 out $end
$upscope $end
$scope module nand1 $end
$var wire 1 - a $end
$var wire 1 - b $end
$var wire 1 2 out $end
$upscope $end
$scope module nand2 $end
$var wire 1 3 a $end
$var wire 1 2 b $end
$var wire 1 ( out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module add1 $end
$var wire 1 & a $end
$var wire 1 ( b $end
$var wire 1 ! sum $end
$var wire 1 ) carry $end
$scope module and0 $end
$var wire 1 & a $end
$var wire 1 ( b $end
$var wire 1 4 w1 $end
$var wire 1 ) out $end
$scope module nand0 $end
$var wire 1 & a $end
$var wire 1 ( b $end
$var wire 1 4 out $end
$upscope $end
$scope module not0 $end
$var wire 1 4 in $end
$var wire 1 ) out $end
$upscope $end
$upscope $end
$scope module xor0 $end
$var wire 1 & a $end
$var wire 1 ( b $end
$var wire 1 ! out $end
$var wire 1 5 notB $end
$var wire 1 6 notAandB $end
$var wire 1 7 notA $end
$var wire 1 8 aAndNotB $end
$scope module and0 $end
$var wire 1 & a $end
$var wire 1 9 w1 $end
$var wire 1 8 out $end
$var wire 1 5 b $end
$scope module nand0 $end
$var wire 1 & a $end
$var wire 1 9 out $end
$var wire 1 5 b $end
$upscope $end
$scope module not0 $end
$var wire 1 9 in $end
$var wire 1 8 out $end
$upscope $end
$upscope $end
$scope module and1 $end
$var wire 1 ( b $end
$var wire 1 : w1 $end
$var wire 1 6 out $end
$var wire 1 7 a $end
$scope module nand0 $end
$var wire 1 ( b $end
$var wire 1 : out $end
$var wire 1 7 a $end
$upscope $end
$scope module not0 $end
$var wire 1 : in $end
$var wire 1 6 out $end
$upscope $end
$upscope $end
$scope module not0 $end
$var wire 1 & in $end
$var wire 1 7 out $end
$upscope $end
$scope module not1 $end
$var wire 1 ( in $end
$var wire 1 5 out $end
$upscope $end
$scope module or0 $end
$var wire 1 8 a $end
$var wire 1 6 b $end
$var wire 1 ; w2 $end
$var wire 1 < w1 $end
$var wire 1 ! out $end
$scope module nand0 $end
$var wire 1 8 a $end
$var wire 1 8 b $end
$var wire 1 < out $end
$upscope $end
$scope module nand1 $end
$var wire 1 6 a $end
$var wire 1 6 b $end
$var wire 1 ; out $end
$upscope $end
$scope module nand2 $end
$var wire 1 < a $end
$var wire 1 ; b $end
$var wire 1 ! out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module or0 $end
$var wire 1 * a $end
$var wire 1 ) b $end
$var wire 1 = w2 $end
$var wire 1 > w1 $end
$var wire 1 # out $end
$scope module nand0 $end
$var wire 1 * a $end
$var wire 1 * b $end
$var wire 1 > out $end
$upscope $end
$scope module nand1 $end
$var wire 1 ) a $end
$var wire 1 ) b $end
$var wire 1 = out $end
$upscope $end
$scope module nand2 $end
$var wire 1 > a $end
$var wire 1 = b $end
$var wire 1 # out $end
$upscope $end
$upscope $end
$upscope $end
$scope task check $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1>
1=
1<
1;
1:
19
08
17
06
15
14
13
12
11
10
0/
1.
0-
1,
1+
0*
0)
0(
0'
0&
0%
0$
0#
b0 "
0!
$end
#1
1!
0<
18
09
07
b1 "
1&
#2
0;
16
0:
05
1!
1(
1<
02
08
1-
19
17
01
0,
0&
b1 "
1%
#3
0!
1#
1;
0=
06
1)
1:
04
07
b10 "
1&
#4
1!
0#
0;
03
1=
16
12
1/
0)
0:
0-
00
14
17
11
1,
0.
0&
0%
b1 "
1$
#5
0!
1#
1;
0=
06
1)
1:
04
07
b10 "
1&
#6
15
0!
0(
1;
13
1=
06
0>
0/
0)
1:
1*
10
14
17
0+
0,
0&
b10 "
1%
#7
1!
0<
18
09
07
b11 "
1&
#8
