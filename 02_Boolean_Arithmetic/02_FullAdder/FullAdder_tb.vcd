$date
	Mon Nov  4 11:07:51 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FullAdder_tb $end
$var wire 1 ! sum $end
$var wire 2 " out_cmp [1:0] $end
$var wire 1 # carry $end
$var reg 1 $ a $end
$var reg 1 % b $end
$var reg 1 & c $end
$var reg 1 ' fail $end
$scope module FULLADDER $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 & c $end
$var wire 1 ( throw $end
$var wire 1 ) sums $end
$var wire 1 ! sum $end
$var wire 1 * carryss $end
$var wire 1 + carrys $end
$var wire 1 # carry $end
$scope module HalfAdder0 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 ) sum $end
$var wire 1 + carry $end
$scope module And_1 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 , n_out $end
$var wire 1 + out $end
$upscope $end
$scope module Xor_1 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var wire 1 ) out $end
$var wire 1 - n_b_a $end
$var wire 1 . n_b $end
$var wire 1 / n_a_b $end
$var wire 1 0 n_a $end
$scope module and_n_a_b $end
$var wire 1 % b $end
$var wire 1 1 n_out $end
$var wire 1 / out $end
$var wire 1 0 a $end
$upscope $end
$scope module and_n_b_a $end
$var wire 1 $ a $end
$var wire 1 2 n_out $end
$var wire 1 - out $end
$var wire 1 . b $end
$upscope $end
$scope module not_a $end
$var wire 1 $ in $end
$var wire 1 0 out $end
$scope module Nand_1 $end
$var wire 1 $ a $end
$var wire 1 $ b $end
$var wire 1 0 out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 % in $end
$var wire 1 . out $end
$scope module Nand_1 $end
$var wire 1 % a $end
$var wire 1 % b $end
$var wire 1 . out $end
$upscope $end
$upscope $end
$scope module or_o $end
$var wire 1 / a $end
$var wire 1 - b $end
$var wire 1 ) out $end
$var wire 1 3 n_b $end
$var wire 1 4 n_a $end
$scope module Nand_1 $end
$var wire 1 ) out $end
$var wire 1 3 b $end
$var wire 1 4 a $end
$upscope $end
$scope module not_a $end
$var wire 1 / in $end
$var wire 1 4 out $end
$scope module Nand_1 $end
$var wire 1 / a $end
$var wire 1 / b $end
$var wire 1 4 out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 - in $end
$var wire 1 3 out $end
$scope module Nand_1 $end
$var wire 1 - a $end
$var wire 1 - b $end
$var wire 1 3 out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module HalfAdder1 $end
$var wire 1 ) a $end
$var wire 1 & b $end
$var wire 1 ! sum $end
$var wire 1 * carry $end
$scope module And_1 $end
$var wire 1 ) a $end
$var wire 1 & b $end
$var wire 1 5 n_out $end
$var wire 1 * out $end
$upscope $end
$scope module Xor_1 $end
$var wire 1 ) a $end
$var wire 1 & b $end
$var wire 1 ! out $end
$var wire 1 6 n_b_a $end
$var wire 1 7 n_b $end
$var wire 1 8 n_a_b $end
$var wire 1 9 n_a $end
$scope module and_n_a_b $end
$var wire 1 & b $end
$var wire 1 : n_out $end
$var wire 1 8 out $end
$var wire 1 9 a $end
$upscope $end
$scope module and_n_b_a $end
$var wire 1 ) a $end
$var wire 1 ; n_out $end
$var wire 1 6 out $end
$var wire 1 7 b $end
$upscope $end
$scope module not_a $end
$var wire 1 ) in $end
$var wire 1 9 out $end
$scope module Nand_1 $end
$var wire 1 ) a $end
$var wire 1 ) b $end
$var wire 1 9 out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 & in $end
$var wire 1 7 out $end
$scope module Nand_1 $end
$var wire 1 & a $end
$var wire 1 & b $end
$var wire 1 7 out $end
$upscope $end
$upscope $end
$scope module or_o $end
$var wire 1 8 a $end
$var wire 1 6 b $end
$var wire 1 ! out $end
$var wire 1 < n_b $end
$var wire 1 = n_a $end
$scope module Nand_1 $end
$var wire 1 ! out $end
$var wire 1 < b $end
$var wire 1 = a $end
$upscope $end
$scope module not_a $end
$var wire 1 8 in $end
$var wire 1 = out $end
$scope module Nand_1 $end
$var wire 1 8 a $end
$var wire 1 8 b $end
$var wire 1 = out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 6 in $end
$var wire 1 < out $end
$scope module Nand_1 $end
$var wire 1 6 a $end
$var wire 1 6 b $end
$var wire 1 < out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module HalfAdder2 $end
$var wire 1 + a $end
$var wire 1 * b $end
$var wire 1 # sum $end
$var wire 1 ( carry $end
$scope module And_1 $end
$var wire 1 + a $end
$var wire 1 * b $end
$var wire 1 > n_out $end
$var wire 1 ( out $end
$upscope $end
$scope module Xor_1 $end
$var wire 1 + a $end
$var wire 1 * b $end
$var wire 1 # out $end
$var wire 1 ? n_b_a $end
$var wire 1 @ n_b $end
$var wire 1 A n_a_b $end
$var wire 1 B n_a $end
$scope module and_n_a_b $end
$var wire 1 * b $end
$var wire 1 C n_out $end
$var wire 1 A out $end
$var wire 1 B a $end
$upscope $end
$scope module and_n_b_a $end
$var wire 1 + a $end
$var wire 1 D n_out $end
$var wire 1 ? out $end
$var wire 1 @ b $end
$upscope $end
$scope module not_a $end
$var wire 1 + in $end
$var wire 1 B out $end
$scope module Nand_1 $end
$var wire 1 + a $end
$var wire 1 + b $end
$var wire 1 B out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 * in $end
$var wire 1 @ out $end
$scope module Nand_1 $end
$var wire 1 * a $end
$var wire 1 * b $end
$var wire 1 @ out $end
$upscope $end
$upscope $end
$scope module or_o $end
$var wire 1 A a $end
$var wire 1 ? b $end
$var wire 1 # out $end
$var wire 1 E n_b $end
$var wire 1 F n_a $end
$scope module Nand_1 $end
$var wire 1 # out $end
$var wire 1 E b $end
$var wire 1 F a $end
$upscope $end
$scope module not_a $end
$var wire 1 A in $end
$var wire 1 F out $end
$scope module Nand_1 $end
$var wire 1 A a $end
$var wire 1 A b $end
$var wire 1 F out $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 1 ? in $end
$var wire 1 E out $end
$scope module Nand_1 $end
$var wire 1 ? a $end
$var wire 1 ? b $end
$var wire 1 E out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task check $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1F
1E
1D
1C
1B
0A
1@
0?
1>
1=
1<
1;
1:
19
08
17
06
15
14
13
12
11
10
0/
1.
0-
1,
0+
0*
0)
0(
0'
0&
0%
0$
0#
b0 "
0!
$end
#1
1!
0=
18
0:
07
b1 "
1&
#2
0<
16
0;
09
1!
1)
1=
04
08
1/
1:
17
01
0.
0&
b1 "
1%
#3
1#
0F
0!
1A
1<
0C
0@
06
1*
1;
05
07
b10 "
1&
#4
0#
1F
1!
0A
0<
03
1C
1@
16
14
1-
0*
0;
0/
02
15
17
11
1.
00
0&
0%
b1 "
1$
#5
1#
0F
0!
1A
1<
0C
0@
06
1*
1;
05
07
b10 "
1&
#6
0E
19
1F
1?
0!
0)
0A
0D
1<
13
1C
1@
06
0B
0-
0*
1;
1+
12
15
17
0,
0.
0&
b10 "
1%
#7
1!
0=
18
0:
07
b11 "
1&
#8
