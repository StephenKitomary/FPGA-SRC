# nand2tetris-13

> ... Would'nt it be nice to make Hack or Jack also run on some "real platform," made from some "real stuff"? ... 
>
_---Noam Nisan and Shimon Schocken---_

This project is about building Hack on real hardware as proposed in Chapter 13 of the course [nand2tetris](https://www.nand2tetris.org/) using free and open source hard- and software. 

The project consists of 11 Levels, starting from simple wires and ending at Hack-13, the final implementation of Hack on iCE40 FPGA running at 100 MHz with 8Kx16bit RAM, 64Kx16Bit ROM, a bootloader to upload programms and a 2.8 Inch Color LCD with 320x240 Pixel.

Finally we will proof, whether Hack-13 will be powerfull enough to run serious Jack-Application like Pong and Tetris?

## Required hardware

```
        +----------------+      +-----------------+     +---------+
    USB | olimexino-32u4 | UEXT | iCE40-HX8K-EVB  | SPI | 2.8"LCD |
PC <===>|                |<====>| 512Kx16bit SRAM |<===>| 320x240 |
        +----------------+      +-----------------+     +---------+
```

### iCE40HX8-EVB Board

This project is based on the iCE40-fpga from lattice. iCE40 has the advantage of beeing programmable with free and open source toolchain. We use [iCE40HX8K-EVB](https://www.olimex.com/Products/FPGA/iCE40/) from Olimex. It comes with 512Kx16bit of external SRAM, which will be used as ROM for hack-code.


### Olimexino-32u4

[Olimexino-32u4](https://www.olimex.com/Products/Duino/AVR/OLIMEXINO-32U4/open-source-hardware) is an arduino-leonardo-like board. It connects iCE40 to a computer via USB. Pressing the HWB-Button will switch between the modes:
1. programmer to upload compiled verilog code to iCE40 (yellow led on).
2. UART-Bridge to talk to fpga (green led on).

### Screen

Hack-13 will drive [ILI9341V](https://www.olimex.com/Products/Modules/LCD/MOD-LCD2-8RTP), a 2.8 Inch LCD color screen with 320x240 Pixel. ILI9341V has the advantage of beeing very well documented.

## Required software
### Project IceStorm
This project uses toolchain [Project IceStorm](http://www.clifford.at/icestorm/) from Clifford Wolf to program iCE40 FPGA.
#### Install dependencies
```
sudo apt-get install build-essential clang bison flex libreadline-dev \
                     gawk tcl-dev libffi-dev git mercurial graphviz   \
                     xdot pkg-config python python3 libftdi-dev \
                     qt5-default python3-dev libboost-all-dev cmake
```
#### Install IceStorm Tools (icepack,icebox,iceprog,icetime,chip databases)
```
git clone https://github.com/cliffordwolf/icestorm.git icestorm
cd icestorm
make -j$(nproc)
sudo make install
```

#### Install NextPNR (place&route tool)
```
git clone https://github.com/YosysHQ/nextpnr nextpnr
cd nextpnr
cmake -DARCH=ice40 -DCMAKE_INSTALL_PREFIX=/usr/local .
make -j$(nproc)
sudo make install
```
#### Install Yosys (Verilog synthesis)
```
git clone https://github.com/cliffordwolf/yosys.git yosys
cd yosys
make -j$(nproc)
sudo make install
cd ..
```
#### Install Icarus Verilog and GTKWave
```
sudo apt-get install gtkwave iverilog
```
### Install iceprogduino
Add iceprogduino to icestorm as programmer.
```
git clone https://github.com/iCE40HX1K-EVB/ 
cd icestorm/iceprogduino
make clean
make
make install
```
### Download firmware iceprog.ino to olimexino-32u4
**Note:** We use modified sketch.. which has support for UART-Bridge.
```
sudo arduino
```

## Getting your hands dirty
We will build Hack-13 in a 10 Level strategy.

A computer does allways the same task: Get some input, and produce some output.

In our case input will be the state of buttons and output will be the led.


	
### Level 3: Sequential Logic
#### Blink
Build a counter in verilog and let the led blink.
#### Echo
Build UART modules to receive and transmit data over UART.

### Level 4: Computer Architecture
#### Hack with minimal IO (Led and Button)
Test Hack
#### Hack with UART
Test internal Memory
	
### Level 5: Assembler
Assembler from nand2tetris translates Hack-Assembler to Machine language binary.

### Level 6: Booting
So far the computer runs machine language stored in the iCE40 BRAM.
This is very limited in space. So we want to use external SRAM (512k x 16Bit) to store programm.
We need:	
#### HARDWARE: SRAM
a bootlogic, which programmes SRAM and switch programmmemory from internal BRAM to external SRAM.
Now we can load the programms of level 5 to SRAM and execute them!
#### SOFTWARE: Boot
bootloader (62 words) stored in iCE40.

### Level 7: Virtual Machine
Assembler language is still very limitated. We implement a stack based Virtualmachine (see. nand2tetris Chapter 7+8)
We write virtual machine code:
1. led: read button and output to led.
2. blink: let the led blink.
3. echo: read data from UART-rx and write to UART-tx
Now Virtual machine controlles the led!

---

### Level 8: High Level Language
We implement a Compiler for the High Level Language JACK (see. nand2tetris Chapter 10+11)
We write JACK classes.
1. led: read button and output to led.
2. blink: blink led
3. buffer: read UART-RX, store to memory and echo to UART-TX
Now the computer executes JACK-Programms!

---

### Level 9: Operating System

Implement Operating System completely written in JACK consisting of the classes:
#### GPIO
Provides access to buttons and leds. The code of LED translates to:
```
class Sys{
	// Sys.init() is the first function executed by the VM
	function void init(){
		do GPIO.init();
		var boolean state;
		while (true){
			let state=GPIO.getBut(0);
			do GPIO.setLed(0,state);
		}
	}
	return;
}
```
#### UART
Provides access to UART-RX and UART-TX. ECHO translates to:
```
class Main(){
	function void main(){
		var char c;
		while (true){
			let c = UART.rx();
			do UART.transmit(c);
		}
	}
	return;
}

```
Main.main() is called from Sys.init()!
#### Memory
We can now buffer UART-Data to Memory with peek and poke.
```
while (true){
	let i=0;
	while (i<10){
		do Memory.poke(3000+i,UART.rx());
		let i=i+1;
	}
	let i=0;
	while (i<10){
		do UART.tx(Memory.peek(3000+i);
		let i=i+1;
	}
}
```
#### Array
Go objects and store the buffered data in an array-object:
```
while (true){
	let r = Array.new(10);
	let i=0;
	while (i<10){
		let r[i]=UART.rx();
		let i=i+1;
	}
	let i=0;
	while (i<10){
		do UART.tx(r[i]);
		let i=i+1;
	}
	do r.dispose();
}

```
#### Math
Till now the cpu could only perform addition/subtraction and logic operation. But we need multiplication/division too:
#### String
Now we can store data in Strings and even convert to Integer. Look if hack can calculate squareroots.
```
var String s;
var int n;

let s = UART.input();
let n = s.intValue();
let n = Math.sqrt(n);
do s.setInt(n);
do UART.println(s);
```
#### Screen
Port Screen.jack from nand2tetris to our little 2.8 Inch LCD. Now you can draw little pictures on the screen.

#### Output
This class provides bitmaps to print characters on the screen.

#### Keyboard
Wrapper class to use UART as keyboard.
#### Sys
VM starts Sys.init() which initialises the whole Operating System and then calls Main.main(). We can now tun BLINK using the wait-function:
```
while(true){ 
	do Sys.wait(1000);
	do GPIO.setLed(0,~GPIO.getLed(0));
}

```
### Level 10: Application
Now we are ready to implement some application in JACK using OS-services.
1. Fibonacci: Calculate Fibonacci-series
2. Average: stores int-Values in Array and calculates the average.
3. Pong: play Pong
4. Tetris: (todo)

In every application folder you find a Makefile, which:
* compiles the project
* uploads the project to hack (32u4 must be in UART-bridge, iCE40 must be in boot-mode)

## Credits

* Juan Gonzalez-Gomez (Obijuan): [open-fpga-verilog-tutorial](https://github.com/Obijuan/open-fpga-verilog-tutorial/). Best tutorial on verilog FPGA using iCE40.
* Noam Nisan and Shimon Schocken: [nand2tetris](https://nand2tetris.org). Learn to build a modern general-purpose computer system from ground up.
* Olimex for producing open source hardware.
* Wolf Clifford: Project IceStorm
